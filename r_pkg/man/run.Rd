% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exported.R
\name{run}
\alias{run}
\title{Run an R expression encoded in the first chunk of the optional \code{ARRAY2} streaming argument.}
\usage{
run()
}
\value{
the evaluated expression value
}
\description{
This convenience function performs the equivalent of the low-level code
\code{eval(unserialize(jsonlite::base64_dec(getChunk()[[1]])))}, optinally including in the evaluation environment values
stored in the \code{env} attribute of the program. See the examples.
}
\examples{
\dontrun{
# Consider the polca_example.R code included in this package, which shows:
query <- sprintf("stream(gss82, 
                 'R --slave -e \\"library(scidbstrm);eval(unserialize(jsonlite::base64_dec(getChunk()[[1]])))\\"', 
                 'format=df',  'types=double,string', 'names=llik,model', _sg(\%s,0))", program@name)
# Equivalent simpler version using the run() function:
query <- sprintf("stream(gss82, 'R --slave -e \\"library(scidbstrm);run()\\"',
                 'format=df',  'types=double,string', 'names=llik,model', _sg(\%s,0))", program@name)

# The run() function lets you add an evnironment in the 'env' attribute
# of your expression to include extra values in your expression environment
# like the 'mydata' value in the simple example below:
library(scidb)
scidbconnect()
library(scidbstrm)
expr <- expression({
  fn <- function(x) { x + mydata }
  map(fn)
})
attr(expr, "env") <- new.env()
attr(expr, "env")$mydata <- 2
program <- as.scidb(jsonlite::base64_enc(serialize(expr, NULL)))
query <- sprintf("stream(build(<a:double>[i=1:4,1,0],i),
                 'R --slave -e \\"library(scidbstrm);run()\\"',
                 'format=df',  'types=double', _sg(\%s,0))", program@name)
iquery(query, return=TRUE)
}
}

